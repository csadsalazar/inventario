ruta
http://localhost:8080/inventario

gits apoyo
https://github.com/BrayanAlfonso/InLineManageProject-master.git
https://github.com/csadsalazar/TALLER-8-Y-9/tree/main

iconos  
https://ionic.io/ionicons

videos sqlserver
https://www.youtube.com/watch?v=K8MJtUmo8nk
https://www.youtube.com/watch?v=0Yj6bzNRfss

video encviar correos con html
https://www.youtube.com/watch?v=iSobU_DjNN4


Agregar a git
si se necesita borrar algo: 
rm -f loquesedeseaborrar

Resetear directorio de commits 
git reset --hard

Flujo normal
git status
git add .
git commit -m "Actualizacion (fecha)"
git push origin main

*Si se daña una tabla en mysql*
REPAIR TABLE mysql.nombretabla;


//REGISTROS
select * from documentos where cdgpraradicacion = 20221160120
select * from tramites where cdgpraradicacion = 20221160120
select * from grupo


//REGISTROS
select * from documentos where cdgpraradicacion = 20221160120
select * from tramites where cdgpraradicacion = 20221160120
select * from grupo
select * from documentos_xml where cdgdocumento = 16528047


-- generar cvls (estado En Curso y Finalizado)
update tramites set estado = 'En Curso' where cdgpraradicacion = 20241032505
update documentos_xml set doc_generado = '0' where cdgdocumento = 16528047


-- cambiar tipo de tramite
update radicacion_tramite set cdgtiptramite = 68 where cdgpraradicacion = 20241028247
update tramites set cdgtiptramite = 68 where cdgpraradicacion = 20241028247


-- gernerar cvls (estado En Curso y Finalizado)
update tramites set estado = 'En Curso' where cdgpraradicacion = 20241032505
update documentos_xml set doc_generado = '0' where cdgdocumento = 16528047

select * from documentos where cdgpraradicacion = 20231083532

-- cambiar tipo de tramite ()
update radicacion_tramite set cdgtiptramite = 68 where cdgpraradicacion = 20241028247
update tramites set cdgtiptramite = 68 where cdgpraradicacion = 20241028247

update tramites set estado = 'En Curso', observacion  = 'Venezuela' where cdgpraradicacion = 20241028247

--  actualizar estado 
update documentos set estadodoc = 'PENDIENTE POR ENTREGAR' where cdgdocumento = 16398182


-- ver funcionario  y ordernar todos los funcionarios
select * from funcionarios where cdgfuncionario = 3353
select * from funcionarios order by nmbfuncionario 

-- ver los pasos que siguen a un tramite
select * from eventos where cdgtiptramite = 39 and cdg_paso = 2
select * from eventos where cdgtiptramite = 39 and cdg_paso = 176 and fchfinal = '2024/04/29'

Actualizar y ver responsable de un tramite
select * from responsables_tramite where cdgpraradicacion =  20241105153
update responsables_tramite set cdgabogado = 1581 where cdgpraradicacion = 20241105153 

Registro sanitario > Ver documentos (ver fecha esperada) 
Radicacion > Reimprimir sitkers
Radicacion > Finalizar comunicacion (forma de agregar automaticamente respuesta auto 12-51)

auto debe quedar en pendiente por nmotificar y el orficio pendiente por entregar 

Actualizar y ver responsable de un tramite
select * from funcionarios where cdgfuncionario = 3253
select * from funcionarios order by nmbfuncionario 

Certificados certimail

-- Finalizado, En curso, Suspendido, AnuladoPorRadicacion
select * from tramites where cdgpraradicacion = 20221061332
UPDATE tramites set estado = 'En curso' where cdgpraradicacion = 20221061332

select * from responsables_tramite where cdgpraradicacion =  20241105153
update responsables_tramite set cdgabogado = 1581 where cdgpraradicacion = 20241105153 


-- 15:279 ENVIO DE CERTIMAIL
select * from radicacion_tramite where cdgpraradicacion = 20241047473
update radicacion_tramite set email_interesado = 'antoniomalaver@quibi.com.co' where cdgpraradicacion = 20241047473

select * from documentos where cdgpraradicacion = 20241047473

-- Para autos
update documentos set estadodoc = 'PENDIENTE POR NOTIFICAR' where cdgdocumento = 16574000

-- Para resolucion oficios, autorizaciones, cetificaciones
update documentos set estadodoc = 'PENDIENTE POR ENTREGAR' where cdgdocumento = 16582519


En despliegue TT tecnmico y TL abogados
para radicar auto en comision revisora 9:25 (nota) se deja en el paso de reparto 
Contraseña PST
Invima2024*

carlososcarmaria2022carlosmaria21091825
LDAP PARA APLICATIVO CONTROL DE INVENTARIO PERSONALIZADO
BUZON:   CIP@invima.gov.co
P:                 prC@v#ZZJB&t7m*
CADENA: CN=Control Inventario Personalizado,OU=Cuentas Institucionales,OU=Bogota,DC=invima,DC=loc
Puerto: 389
contraseña control inventario personalizado: M5D_Em9C28QFKCE2


FIRMA DE TODOS LOS documentos
Pendiewnte por firmar, 
En preparacion (Documento estudiando o realizando)
PENDIENTE POR ENTREGAR
PENDIENTE POR NOTIFICAR
ANULADO


PARA PASO DE DESISTIMIENTO DE DEBE CONTAR CON:
Radicacion de desistimiento
Estudio de desistimiento
Aprobacion de desistimiento








package controllers;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import models.Dependency;
import models.Object;
import models.User;
import utils.ConnectionBD;

public class ObjectsEditMasive {

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Connection conn = null;
        try {
            conn = ConnectionBD.getConnection();
            List<Dependency> dependencias = ListDependencies.getDependencies();
            request.setAttribute("dependencia", dependencias);

            HttpSession session = request.getSession();
            String username = (String) session.getAttribute("username");

            if (username == null) {
                request.setAttribute("error", "La sesión ha expirado. Por favor, inicia sesión nuevamente.");
                request.getRequestDispatcher("index.jsp").forward(request, response);
                return;
            }

            int idUsuarioAdmin = 0;
            try {
                idUsuarioAdmin = UserController.getUserIdByUsername(username);
            } catch (ClassNotFoundException | SQLException e) {
                e.printStackTrace();
                request.setAttribute("error", "Error al obtener el ID del usuario: " + e.getMessage());
                request.getRequestDispatcher("managementobjects.jsp").forward(request, response);
                return;
            }

            request.setAttribute("userIdAdmin", idUsuarioAdmin);
            request.getRequestDispatcher("addobject.jsp").forward(request, response);
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
            request.setAttribute("error", "Error al obtener las dependencias: " + e.getMessage());
            request.getRequestDispatcher("managementobjects.jsp").forward(request, response);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public static List<Object> getObjects(String[] ids) throws SQLException, ClassNotFoundException {
        List<Object> objectList = new ArrayList<>();
        Connection conn = ConnectionBD.getConnection();
        StringBuilder query = new StringBuilder("SELECT * FROM ADMINISTRATIVA.AL_INV.MA_Bien WHERE PK_Codigo IN (");

        for (int i = 0; i < ids.length; i++) {
            query.append("?");
            if (i < ids.length - 1) {
                query.append(",");
            }
        }
        query.append(")");

        PreparedStatement stmt = conn.prepareStatement(query.toString());

        for (int i = 0; i < ids.length; i++) {
            stmt.setLong(i + 1, Long.parseLong(ids[i]));
        }

        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            Object obj = new Object();
            obj.setCode(rs.getLong("PK_Codigo"));
            obj.setName(rs.getString("nombre"));
            obj.setDescription(rs.getString("descripcion"));
            obj.setValue(rs.getLong("valor"));
            obj.setObservation(rs.getString("observacionAdmin"));
            obj.setState(rs.getString("estado"));
            obj.setCondition(rs.getString("condicion"));
            User user = ListUsers.getUsersById(rs.getInt("FK_Usuario"));
            obj.setUser(user);
            User admin = ListUsers.getUsersById(rs.getInt("FK_UsuarioAdmin"));
            obj.setAdmin(admin);
            Dependency dependencia = ListDependencies.getDependencyById(rs.getInt("FK_Dependencia"));
            obj.setPK_idDependency(dependencia);
            objectList.add(obj);
        }
        rs.close();
        stmt.close();
        conn.close();
        return objectList;
    }

    public static void updateObjects(HttpServletRequest request, String[] ids, String name, String description, String observation, String state, String dependency, String user, String condition, String admin) throws SQLException, ClassNotFoundException {
        Connection conn = ConnectionBD.getConnection();
        StringBuilder query = new StringBuilder("UPDATE ADMINISTRATIVA.AL_INV.MA_Bien SET ");
    
        boolean hasName = (name != null && !name.trim().isEmpty());
        boolean hasDescription = (description != null && !description.trim().isEmpty());
        boolean hasObservation = (observation != null && !observation.trim().isEmpty());
        boolean hasState = (state != null && !state.trim().isEmpty() && !state.equals(""));
        boolean hasCondition = (condition != null && !condition.trim().isEmpty() && !condition.equals(""));
        boolean hasDependency = (dependency != null && !dependency.trim().isEmpty() && !dependency.equals(""));
        boolean hasUser = (user != null && !user.trim().isEmpty());
        boolean hasAdmin = (admin != null && !admin.trim().isEmpty());
    
        if (hasName) query.append("nombre = ?, ");
        if (hasDescription) query.append("descripcion = ?, ");
        if (hasObservation) query.append("observacionAdmin = ?, ");
        if (hasState) query.append("estado = ?, ");
        if (hasCondition) query.append("condicion = ?, ");
        if (hasDependency) query.append("FK_Dependencia = ?, ");
        if (hasUser) query.append("FK_Usuario = ?, ");
        if (hasAdmin) query.append("FK_UsuarioAdmin = ?, ");
    
        query.append("fechaAdmin = ? WHERE PK_Codigo IN (");
    
        for (int i = 0; i < ids.length; i++) {
            query.append("?");
            if (i < ids.length - 1) {
                query.append(",");
            }
        }
        query.append(")");
    
        PreparedStatement stmt = conn.prepareStatement(query.toString());
    
        int index = 1;
        if (hasName) stmt.setString(index++, name);
        if (hasDescription) stmt.setString(index++, description);
        if (hasObservation) stmt.setString(index++, observation);
        else stmt.setString(index++, "Sin observación");
        if (hasState) stmt.setString(index++, state);
        if (hasCondition) stmt.setString(index++, condition);
        if (hasDependency) stmt.setString(index++, dependency);
        if (hasUser) {
            int userId = UserController.getUserIdByUsername(user);
            stmt.setInt(index++, userId);
        }
        if (hasAdmin) {
            int adminId = Integer.parseInt(admin);
            stmt.setInt(index++, adminId);
        }
        stmt.setTimestamp(index++, new Timestamp(System.currentTimeMillis()));
    
        for (int i = 0; i < ids.length; i++) {
            stmt.setLong(index++, Long.parseLong(ids[i]));
        }
    
        stmt.executeUpdate();
        stmt.close();
        conn.close();
    
        
    }    
}